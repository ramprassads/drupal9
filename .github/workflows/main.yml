# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: php:7.3-apache
      env:
        NODE_ENV: production
      ports:
      - 80
      volumes:
      - GITHUB_WORKSPACE:/var/www/html
    steps:
    - name: Set up container
      run: |
        echo "Update package lists."
        apt-get update
        echo "Install base packages."
        apt-get install -y build-essential libssl-dev gnupg libfreetype6-dev libjpeg62-turbo-dev libmcrypt-dev libicu-dev libxml2-dev vim wget unzip git subversion default-mysql-client
        echo "Update package lists."
        apt-get update
        echo "Install NVM."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
        . ~/.nvm/nvm.sh
        echo "Install node."
        nvm install 12.9.0
        nvm use 12.9.0
        echo "Install composer."
        curl -sS https://getcomposer.org/installer | php 
        mv composer.phar /usr/local/bin/composer
        echo "Install PHP extensions."
        docker-php-ext-install -j$(nproc) iconv intl xml soap opcache pdo pdo_mysql mysqli mbstring
        docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
        docker-php-ext-install -j$(nproc) gd
        pecl install mcrypt-1.0.2
        docker-php-ext-enable mcrypt

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run composer install
      run: |
        composer install

    - name: Run Drush
      run: |
        ./vendor/drush/drush/drush cr

    - name: Run PHPCS
      run: |
        BRANCH_NAME=$(echo $GITHUB_REF | grep -oP '(?<=refs\/heads\/).*')
        echo $BRANCH_NAME
        rm .gitignore
        mv .deployignore .gitignore
        git config --global user.email "ci@company.com"
        git config --global user.name "Company CI"
